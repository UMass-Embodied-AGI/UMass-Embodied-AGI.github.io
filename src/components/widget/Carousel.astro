---
import { Icon } from "astro-icon/components";
---

<div class="embla">
  <div class="embla__viewport relative">
    <div class="embla__container">
      <slot />
    </div>
    <div class="embla__controls">
      <div
        class="embla__buttons absolute top-1/2 w-full flex justify-between"
      >
        <button
          class="embla__button embla__button--prev embla__button--round embla__button--round-left"
          type="button"
        >
          <Icon
            name="material-symbols:chevron-left-rounded"
          />
        </button>
        <button
          class="embla__button embla__button--next embla__button--round embla__button--round-right"
          type="button"
        >
          <Icon
            name="material-symbols:chevron-right-rounded"
          />
        </button>
      </div>
      <div class="embla__dots"></div>
    </div>
  </div>
</div>

<style>
    .embla__button--round {
        @apply w-8 h-8 flex items-center justify-center text-3xl rounded-full bg-white dark:bg-black hover:brightness-95 hover:dark:bg-white/20 active:scale-90 transition-all ease-out duration-150 border border-black/20 dark:border-white/20 text-black/50 dark:text-white/50;
        
        &-left {
            @apply pr-px;
        }
    }
</style>

<script>
  import EmblaCarousel, { type EmblaCarouselType } from "embla-carousel";
  import Autoplay from "embla-carousel-autoplay";

  const addTogglePrevNextBtnsActive = (
    emblaApi: EmblaCarouselType,
    prevBtn: HTMLElement,
    nextBtn: HTMLElement,
  ): (() => void) => {
    const togglePrevNextBtnsState = (): void => {
      if (emblaApi.canScrollPrev()) prevBtn.removeAttribute("disabled");
      else prevBtn.setAttribute("disabled", "disabled");

      if (emblaApi.canScrollNext()) nextBtn.removeAttribute("disabled");
      else nextBtn.setAttribute("disabled", "disabled");
    };

    emblaApi
      .on("select", togglePrevNextBtnsState)
      .on("init", togglePrevNextBtnsState)
      .on("reInit", togglePrevNextBtnsState);

    return (): void => {
      prevBtn.removeAttribute("disabled");
      nextBtn.removeAttribute("disabled");
    };
  };

  export const addPrevNextBtnsClickHandlers = (
    emblaApi: EmblaCarouselType,
    prevBtn: HTMLElement,
    nextBtn: HTMLElement,
  ): (() => void) => {
    const scrollPrev = (): void => {
      emblaApi.scrollPrev();
    };
    const scrollNext = (): void => {
      emblaApi.scrollNext();
    };
    prevBtn.addEventListener("click", scrollPrev, false);
    nextBtn.addEventListener("click", scrollNext, false);

    const removeTogglePrevNextBtnsActive = addTogglePrevNextBtnsActive(
      emblaApi,
      prevBtn,
      nextBtn,
    );

    return (): void => {
      removeTogglePrevNextBtnsActive();
      prevBtn.removeEventListener("click", scrollPrev, false);
      nextBtn.removeEventListener("click", scrollNext, false);
    };
  };

  export const addDotBtnsAndClickHandlers = (
    emblaApi: EmblaCarouselType,
    dotsNode: HTMLElement,
  ): (() => void) => {
    let dotNodes: HTMLElement[] = [];

    const addDotBtnsWithClickHandlers = (): void => {
      dotsNode.innerHTML = emblaApi
        .scrollSnapList()
        .map(() => '<button class="embla__dot" type="button"></button>')
        .join("");

      const scrollTo = (index: number): void => {
        emblaApi.scrollTo(index);
      };

      dotNodes = Array.from(dotsNode.querySelectorAll(".embla__dot"));
      dotNodes.forEach((dotNode, index) => {
        dotNode.addEventListener("click", () => scrollTo(index), false);
      });
    };

    const toggleDotBtnsActive = (): void => {
      const previous = emblaApi.previousScrollSnap();
      const selected = emblaApi.selectedScrollSnap();
      dotNodes[previous].classList.remove("embla__dot--selected");
      dotNodes[selected].classList.add("embla__dot--selected");
    };

    emblaApi
      .on("init", addDotBtnsWithClickHandlers)
      .on("reInit", addDotBtnsWithClickHandlers)
      .on("init", toggleDotBtnsActive)
      .on("reInit", toggleDotBtnsActive)
      .on("select", toggleDotBtnsActive);

    return (): void => {
      dotsNode.innerHTML = "";
    };
  };

  const emblaNode: HTMLElement | null = document.querySelector(".embla");
  const viewportNode: HTMLElement | null | undefined =
    emblaNode?.querySelector(".embla__viewport");
  const prevBtnNode: HTMLElement | null | undefined = emblaNode?.querySelector(
    ".embla__button--prev",
  );
  const nextBtnNode: HTMLElement | null | undefined = emblaNode?.querySelector(
    ".embla__button--next",
  );
  const dotsNode: HTMLElement | null | undefined =
    emblaNode?.querySelector(".embla__dots");

  if (
    !emblaNode ||
    !viewportNode ||
    !prevBtnNode ||
    !nextBtnNode ||
    !dotsNode
  ) {
    throw new Error("Carousel elements not found");
  }

  const emblaApi = EmblaCarousel(
    viewportNode,
    {
      loop: true,
    },
    [Autoplay({ playOnInit: true })],
  );

  const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
    emblaApi,
    prevBtnNode,
    nextBtnNode,
  );
  const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(
    emblaApi,
    dotsNode,
  );

  emblaApi.on("destroy", removePrevNextBtnsClickHandlers);
  emblaApi.on("destroy", removeDotBtnsAndClickHandlers);
</script>
